// <auto-generated />
using System;
using EFProject.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFProject.Migrations
{
    [DbContext(typeof(TrackerContext))]
    [Migration("20250120115038_aftermood")]
    partial class aftermood
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFProject.Models.Mood", b =>
                {
                    b.Property<int>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoodId"));

                    b.Property<int>("Intensity")
                        .HasColumnType("int");

                    b.Property<DateTime>("MoodDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Moodtitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trigger")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MoodId");

                    b.ToTable("Mood");
                });

            modelBuilder.Entity("EFProject.Models.Reminders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("reminders")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("EFProject.Models.User", b =>
                {
                    b.Property<string>("username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MoodId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("username");

                    b.HasIndex("MoodId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("RemindersUser", b =>
                {
                    b.Property<int>("RemindersId")
                        .HasColumnType("int");

                    b.Property<string>("Usersusername")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RemindersId", "Usersusername");

                    b.HasIndex("Usersusername");

                    b.ToTable("RemindersUser");
                });

            modelBuilder.Entity("EFProject.Models.User", b =>
                {
                    b.HasOne("EFProject.Models.Mood", null)
                        .WithMany("Users")
                        .HasForeignKey("MoodId");
                });

            modelBuilder.Entity("RemindersUser", b =>
                {
                    b.HasOne("EFProject.Models.Reminders", null)
                        .WithMany()
                        .HasForeignKey("RemindersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Usersusername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFProject.Models.Mood", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
